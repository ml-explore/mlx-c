<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="group__mlx__closure" kind="group">
    <compoundname>mlx_closure</compoundname>
    <title>Closures</title>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__mlx__closure_1gab304bffccbf5d2ef4a09bdca4778cb5f" prot="public" static="no">
        <type>struct mlx_closure_ *</type>
        <definition>typedef struct mlx_closure_* mlx_closure</definition>
        <argsstring></argsstring>
        <name>mlx_closure</name>
        <briefdescription>
<para>A closure encapsulating a function taking a vector of arrays, and returning a vector of arrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mlx/c/closure.h" line="22" column="28" bodyfile="mlx/c/closure.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__mlx__closure_1ga0f47fc38cb9ec4b0da7902ae18261bf0" prot="public" static="no">
        <type>struct mlx_closure_value_and_grad_ *</type>
        <definition>typedef struct mlx_closure_value_and_grad_* mlx_closure_value_and_grad</definition>
        <argsstring></argsstring>
        <name>mlx_closure_value_and_grad</name>
        <briefdescription>
<para>A closure which takes a vector of arrays, and returns a vector of vector of arrays of size 2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mlx/c/closure.h" line="53" column="43" bodyfile="mlx/c/closure.h" bodystart="53" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="group__mlx__closure_1ga7d7413d3cbcc07cef3c052b2dd8189d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__mlx__closure_1gab304bffccbf5d2ef4a09bdca4778cb5f" kindref="member">mlx_closure</ref></type>
        <definition>mlx_closure mlx_closure_new</definition>
        <argsstring>(mlx_vector_array(*fun)(const mlx_vector_array arrs))</argsstring>
        <name>mlx_closure_new</name>
        <param>
          <type><ref refid="group__mlx__vector__array_1gaaa676b4f577904702c78a2067cf3c8a8" kindref="member">mlx_vector_array</ref>(*)(const <ref refid="group__mlx__vector__array_1gaaa676b4f577904702c78a2067cf3c8a8" kindref="member">mlx_vector_array</ref> arrs)</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Returns a closure encapsulating the specified function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mlx/c/closure.h" line="27" column="13" declfile="mlx/c/closure.h" declline="27" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__mlx__closure_1ga45952f16faf15ae11aaf798fd5bc28c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__mlx__closure_1gab304bffccbf5d2ef4a09bdca4778cb5f" kindref="member">mlx_closure</ref></type>
        <definition>mlx_closure mlx_closure_new_unary</definition>
        <argsstring>(mlx_array(*fun)(const mlx_array))</argsstring>
        <name>mlx_closure_new_unary</name>
        <param>
          <type><ref refid="group__mlx__array_1ga74a41c6be8b4520da3788a5626d5c783" kindref="member">mlx_array</ref>(*)(const <ref refid="group__mlx__array_1ga74a41c6be8b4520da3788a5626d5c783" kindref="member">mlx_array</ref>)</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Returns a closure encapsulating the specified function. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience function, mapping <computeroutput>mlx_array</computeroutput> to <computeroutput>mlx_vector_array</computeroutput> under the hood. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mlx/c/closure.h" line="34" column="13" declfile="mlx/c/closure.h" declline="34" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__mlx__closure_1ga51d007c217461faca06972a15d6e3649" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__mlx__closure_1gab304bffccbf5d2ef4a09bdca4778cb5f" kindref="member">mlx_closure</ref></type>
        <definition>mlx_closure mlx_closure_new_with_payload</definition>
        <argsstring>(mlx_vector_array(*fun)(const mlx_vector_array, void *), void *payload, void(*dtor)(void *))</argsstring>
        <name>mlx_closure_new_with_payload</name>
        <param>
          <type><ref refid="group__mlx__vector__array_1gaaa676b4f577904702c78a2067cf3c8a8" kindref="member">mlx_vector_array</ref>(*)(const <ref refid="group__mlx__vector__array_1gaaa676b4f577904702c78a2067cf3c8a8" kindref="member">mlx_vector_array</ref>, void *)</type>
          <declname>fun</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>payload</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>dtor</declname>
        </param>
        <briefdescription>
<para>Returns a closure encapsulating the specified function, with the given payload. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>dtor</computeroutput> is not <computeroutput>NULL</computeroutput>, it will called when the closure is destroyed to free the payload. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mlx/c/closure.h" line="40" column="13" declfile="mlx/c/closure.h" declline="40" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__mlx__closure_1ga691b549af6db1861694fd9d9e9879940" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__mlx__vector__array_1gaaa676b4f577904702c78a2067cf3c8a8" kindref="member">mlx_vector_array</ref></type>
        <definition>mlx_vector_array mlx_closure_apply</definition>
        <argsstring>(mlx_closure cls, const mlx_vector_array)</argsstring>
        <name>mlx_closure_apply</name>
        <param>
          <type><ref refid="group__mlx__closure_1gab304bffccbf5d2ef4a09bdca4778cb5f" kindref="member">mlx_closure</ref></type>
          <declname>cls</declname>
        </param>
        <param>
          <type>const <ref refid="group__mlx__vector__array_1gaaa676b4f577904702c78a2067cf3c8a8" kindref="member">mlx_vector_array</ref></type>
        </param>
        <briefdescription>
<para>Applies the closure over the given vector of arrays argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mlx/c/closure.h" line="47" column="18" declfile="mlx/c/closure.h" declline="47" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__mlx__closure_1gab5d7efa2d147102094b4a1eeeef0ed79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__mlx__vector__vector__array_1ga609d1dd106d325c8c7222368c127e6ce" kindref="member">mlx_vector_vector_array</ref></type>
        <definition>mlx_vector_vector_array mlx_closure_value_and_grad_apply</definition>
        <argsstring>(mlx_closure_value_and_grad cls, const mlx_vector_array inputs)</argsstring>
        <name>mlx_closure_value_and_grad_apply</name>
        <param>
          <type><ref refid="group__mlx__closure_1ga0f47fc38cb9ec4b0da7902ae18261bf0" kindref="member">mlx_closure_value_and_grad</ref></type>
          <declname>cls</declname>
        </param>
        <param>
          <type>const <ref refid="group__mlx__vector__array_1gaaa676b4f577904702c78a2067cf3c8a8" kindref="member">mlx_vector_array</ref></type>
          <declname>inputs</declname>
        </param>
        <briefdescription>
<para>Applies the closure over the given vector of arrays argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mlx/c/closure.h" line="57" column="25" declfile="mlx/c/closure.h" declline="57" declcolumn="25"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>MLX closure objects. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
